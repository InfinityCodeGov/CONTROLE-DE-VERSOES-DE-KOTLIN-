package www.appvibe.com.unifyhub

import android.annotation.SuppressLint
import android.media.MediaPlayer
import android.net.ConnectivityManager
import android.net.NetworkCapabilities
import android.os.*
import android.webkit.*
import android.widget.ImageView
import android.widget.ProgressBar
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import java.net.InetSocketAddress
import java.net.Socket

class MainActivity : AppCompatActivity() {

    private lateinit var webView: WebView
    private lateinit var progressBar: ProgressBar
    private lateinit var vibrator: Vibrator
    private lateinit var connectivityManager: ConnectivityManager
    private lateinit var imageView: ImageView
    private var mediaPlayer: MediaPlayer? = null

    @SuppressLint("MissingInflatedId")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        webView = findViewById(R.id.webview)
        progressBar = findViewById(R.id.progressBar)
        imageView = findViewById(R.id.imageView)

        vibrator = getSystemService(VIBRATOR_SERVICE) as Vibrator
        connectivityManager = getSystemService(ConnectivityManager::class.java)

        webView.settings.apply {
            javaScriptEnabled = true
            domStorageEnabled = true
            allowContentAccess = true
            allowFileAccess = true
            javaScriptCanOpenWindowsAutomatically = true
            builtInZoomControls = true
            displayZoomControls = false
            setSupportZoom(true)
            cacheMode = WebSettings.LOAD_NO_CACHE
            mediaPlaybackRequiresUserGesture = false
            loadsImagesAutomatically = true
            mixedContentMode = WebSettings.MIXED_CONTENT_ALWAYS_ALLOW
            userAgentString =
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36 OPR/88.0.4412.85"
        }

        webView.webChromeClient = object : WebChromeClient() {
            override fun onProgressChanged(view: WebView, newProgress: Int) {
                super.onProgressChanged(view, newProgress)
                progressBar.visibility = if (newProgress < 100) ProgressBar.VISIBLE else ProgressBar.GONE
                webView.visibility = if (newProgress == 100) WebView.VISIBLE else WebView.GONE
            }
        }

        webView.webViewClient = object : WebViewClient() {
            override fun onPageFinished(view: WebView?, url: String?) {
                super.onPageFinished(view, url)
                view?.evaluateJavascript("document.querySelectorAll('video').forEach(v => v.play());", null)
            }

            // Removido: NÃ£o exibir imagem ao receber erro
            override fun onReceivedError(view: WebView?, request: WebResourceRequest?, error: WebResourceError?) {
                super.onReceivedError(view, request, error)
            }
        }

        Thread {
            if (temInternetReal()) {
                runOnUiThread {
                    webView.loadUrl("https://infinitycodegov.github.io/Navegador-UnifyHub-/")
                    webView.visibility = WebView.VISIBLE
                    imageView.visibility = ImageView.GONE
                    pararMusica()
                }
            } else {
                runOnUiThread {
                    vibrarDispositivo()
                    mostrarImagemComMusica()
                }
            }
        }.start()

        connectivityManager.registerDefaultNetworkCallback(object : ConnectivityManager.NetworkCallback() {
            override fun onAvailable(network: android.net.Network) {
                super.onAvailable(network)
                Thread {
                    if (temInternetReal()) {
                        runOnUiThread {
                            webView.loadUrl("https://infinitycodegov.github.io/Navegador-UnifyHub-/")
                            webView.visibility = WebView.VISIBLE
                            imageView.visibility = ImageView.GONE
                            pararMusica()
                        }
                    }
                }.start()
            }

            override fun onLost(network: android.net.Network) {
                super.onLost(network)
                Thread {
                    if (!temInternetReal()) {
                        runOnUiThread {
                            vibrarDispositivo()
                            mostrarImagemComMusica()
                        }
                    }
                }.start()
            }
        })

        window.statusBarColor = android.graphics.Color.parseColor("#000000")
        window.navigationBarColor = android.graphics.Color.parseColor("#000000")
    }

    override fun onBackPressed() {
        if (webView.canGoBack()) {
            webView.goBack()
        } else {
            super.onBackPressed()
        }
    }

    private fun temInternetReal(): Boolean {
        return try {
            val socket = Socket()
            socket.connect(InetSocketAddress("8.8.8.8", 53), 1500)
            socket.close()
            true
        } catch (e: Exception) {
            false
        }
    }

    private fun vibrarDispositivo() {
        if (vibrator.hasVibrator()) {
            val efeitoVibracao = VibrationEffect.createOneShot(500, VibrationEffect.DEFAULT_AMPLITUDE)
            vibrator.vibrate(efeitoVibracao)
        }
    }

    private fun mostrarImagemComMusica() {
        webView.visibility = WebView.GONE
        imageView.visibility = ImageView.VISIBLE
        imageView.setImageResource(R.drawable.sem_internet)

        if (mediaPlayer == null) {
            mediaPlayer = MediaPlayer.create(this, R.raw.musica)
            mediaPlayer?.isLooping = true
            mediaPlayer?.start()
        }
    }

    private fun pararMusica() {
        mediaPlayer?.release()
        mediaPlayer = null
    }
}
